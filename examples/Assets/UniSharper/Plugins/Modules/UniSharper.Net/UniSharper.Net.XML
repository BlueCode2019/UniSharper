<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UniSharper.Net</name>
    </assembly>
    <members>
        <member name="T:UniSharper.Net.Http.IMonoRestClient">
            <summary>
            The <see cref="T:UniSharper.Net.Http.IMonoRestClient"/> interface defines methods for handling asynchronous REST
            request in Unity Engine.
            </summary>
            <seealso cref="T:RestSharp.IRestClient"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:UniSharper.Net.Http.IMonoRestClient.DownloadDataAsync(RestSharp.IRestRequest,System.Action{System.Byte[],RestSharp.RestRequestAsyncHandle})">
            <summary>
            Sends the specified request and downloads the response data.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
        </member>
        <member name="M:UniSharper.Net.Http.IMonoRestClient.SendRequestAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            Sends the request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
        </member>
        <member name="M:UniSharper.Net.Http.IMonoRestClient.SendRequestAsyncGet(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},RestSharp.Method)">
            <summary>
            Sends a GET-style request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <param name="method">The <see cref="T:RestSharp.Method"/> represents for HTTP method to execute.</param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
        </member>
        <member name="M:UniSharper.Net.Http.IMonoRestClient.SendRequestAsyncPost(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},RestSharp.Method)">
            <summary>
            Sends a POST-style request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <param name="method">The <see cref="T:RestSharp.Method"/> represents for HTTP method to execute.</param>
        </member>
        <member name="T:UniSharper.Net.Http.MonoRestClient">
            <summary>
            Client to translate RestRequests into Http requests and process response result for Mono in
            Unity Engine.
            </summary>
            <seealso cref="T:RestSharp.RestClient"/>
            <seealso cref="T:UniSharper.Threading.ISynchronizedObject"/>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UniSharper.Net.Http.MonoRestClient"/> class.
            </summary>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:UniSharper.Net.Http.MonoRestClient"/> class with <see
            cref="T:System.Uri"/> represent for the base URL to request.
            </summary>
            <param name="baseUrl">The <see cref="T:System.Uri"/> represent for the base URL to request.</param>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UniSharper.Net.Http.MonoRestClient"/> class with <see
            cref="T:System.String"/> represent for the base URL string to request.
            </summary>
            <param name="baseUrl">
            The <see cref="T:System.String"/> represent for the base URL string to request.
            </param>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.DownloadDataAsync(RestSharp.IRestRequest,System.Action{System.Byte[],RestSharp.RestRequestAsyncHandle})">
            <summary>
            Sends the specified request and downloads the response data.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
            <exception cref="T:System.ObjectDisposedException">
            <c>UniSharper.Net.Http.MonoRestClient</c> is disposed.
            </exception>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.SendRequestAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            Sends the request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
            <exception cref="T:System.ObjectDisposedException">
            <c>UniSharper.Net.Http.MonoRestClient</c> is disposed.
            </exception>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.SendRequestAsyncGet(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},RestSharp.Method)">
            <summary>
            Sends a GET-style request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <param name="method">The <see cref="T:RestSharp.Method"/> represents for HTTP method to execute.</param>
            <returns>The <see cref="T:RestSharp.RestRequestAsyncHandle"/> to handle asynchronous request.</returns>
            <exception cref="T:System.ObjectDisposedException">
            <c>UniSharper.Net.Http.MonoRestClient</c> is disposed.
            </exception>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.SendRequestAsyncPost(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},RestSharp.Method)">
            <summary>
            Sends a POST-style request and callback asynchronously, authenticating if needed.
            </summary>
            <param name="request"><see cref="T:RestSharp.IRestRequest"/> to be sent.</param>
            <param name="callback">
            Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <param name="method">The <see cref="T:RestSharp.Method"/> represents for HTTP method to execute.</param>
            <returns>RestRequestAsyncHandle.</returns>
            <exception cref="T:System.ObjectDisposedException">
            <c>UniSharper.Net.Http.MonoRestClient</c> is disposed.
            </exception>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.Synchronize">
            <summary>
            Synchronizes data between threads.
            </summary>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.CreateContext(RestSharp.IRestRequest,System.Action{System.Byte[],RestSharp.RestRequestAsyncHandle})">
            <summary>
            Creates the <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> for main thread of Unity to invoke callback.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            The Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>
            The <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> for main thread of Unity to invoke callback.
            </returns>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.CreateContext(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            Creates the <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> for main thread of Unity to invoke callback.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            The Callback function to be executed upon completion providing access to the asynchronous handle.
            </param>
            <returns>
            The <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> for main thread of Unity to invoke callback.
            </returns>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.RemoveCompletedContexts(System.Collections.Generic.IList{UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext})">
            <summary>
            Removes contexts whose request is completed.
            </summary>
            <param name="list">The context list.</param>
        </member>
        <member name="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext">
            <summary>
            The <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> represents for the context object for main
            thread of Unity to invoke callback.
            </summary>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.#ctor(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            Initializes a new instance of the <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> class.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            The Callback function to be executed upon completion providing access to the
            asynchronous handle.
            </param>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.#ctor(RestSharp.IRestRequest,System.Action{System.Byte[],RestSharp.RestRequestAsyncHandle})">
            <summary>
            Initializes a new instance of the <see cref="T:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext"/> class.
            </summary>
            <param name="request">The <see cref="T:RestSharp.IRestRequest"/> to send.</param>
            <param name="callback">
            The Callback function to be executed upon completion providing access to the
            asynchronous handle.
            </param>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.AsyncHandle">
            <summary>
            Gets or sets the asynchronous handle.
            </summary>
            <value>The asynchronous handle.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.Callback">
            <summary>
            Gets or sets the Callback function to be executed upon completion providing access to
            the asynchronous handle.
            </summary>
            <value>The callback function.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.DownloadDataCallback">
            <summary>
            Gets or sets the data-download Callback function to be executed upon completion
            providing access to the asynchronous handle.
            </summary>
            <value>The data-download callback function.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.DownloadedData">
            <summary>
            Gets the downloaded data.
            </summary>
            <value>The downloaded data.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.IsRequestCompleted">
            <summary>
            Gets or sets a value indicating whether the request is completed.
            </summary>
            <value><c>true</c> if the request is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.Request">
            <summary>
            Gets or sets the <see cref="T:RestSharp.IRestRequest"/> to send.
            </summary>
            <value>The <see cref="T:RestSharp.IRestRequest"/> to send.</value>
        </member>
        <member name="P:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.Response">
            <summary>
            Gets or sets the <see cref="T:RestSharp.IRestResponse"/> received.
            </summary>
            <value>The <see cref="T:RestSharp.IRestResponse"/> received.</value>
        </member>
        <member name="M:UniSharper.Net.Http.MonoRestClient.MonoRestRequestAsyncContext.GetResponse(RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle)">
            <summary>
            The callback of getting the <see cref="T:RestSharp.IRestResponse"/>.
            </summary>
            <param name="response">The <see cref="T:RestSharp.IRestResponse"/> received.</param>
            <param name="handle">The asynchronous handle.</param>
        </member>
    </members>
</doc>
