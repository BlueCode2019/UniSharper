<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReSharp</name>
    </assembly>
    <members>
        <member name="T:ReSharp.Patterns.Command.AsyncCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> implementation to execute asynchronous operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncCommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Abort">
            <summary>
            Aborts the asynchronous operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.AsyncCommand"/> executed to invoke.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Executed">
            <summary>
            The <see cref="T:ReSharp.Patterns.Command.AsyncCommand"/> executed.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.AsyncMacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand"/> implementation to executes other <see
            cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.AsyncCommand"/>
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.AsyncMacroCommand"/> class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.Abort">
            <summary>
            Aborts asynchronous commands execution.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.AddSubCommand(ReSharp.Patterns.Command.IAsyncCommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/>.
            </summary>
            <param name="subCommand">
            The <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> to be executed by this <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand"/>.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.AsyncCommand"/> executed to invoke.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.CheckAbortedOrExecuted">
            <summary>
            Checks if the command is aborted or executed by user.
            </summary>
            <returns><c>true</c> if the command is aborted or executed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.Dispose">
            <summary>
            Disposes objects.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.ExecuteNextSubCommand">
            <summary>
            Executes the next <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/>.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.IAsyncCommand">
            <summary>
            The interface definition for an asynchronous command.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncCommand.Abort">
            <summary>
            Aborts the asynchronous operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> executed to invoke.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.IAsyncMacroCommand">
            <summary>
            The interface definition for the command can execute other <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncCommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncMacroCommand.AddSubCommand(ReSharp.Patterns.Command.IAsyncCommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/>.
            </summary>
            <param name="subCommand">
            The <see cref="T:ReSharp.Patterns.Command.IAsyncCommand"/> to be executed by this <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand"/>.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.ICommand">
            <summary>
            The interface definition for the command.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.ICommand.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.IMacroCommand">
            <summary>
            The interface definition for the command can execute other <see cref="T:ReSharp.Patterns.Command.ICommand"/> s.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IMacroCommand.AddSubCommand(ReSharp.Patterns.Command.ICommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.ICommand"/>.
            </summary>
            <param name="subCommand">The <see cref="T:ReSharp.Patterns.Command.ICommand"/> to be executed by this <see cref="T:ReSharp.Patterns.Command.IMacroCommand"/>.</param>
        </member>
        <member name="T:ReSharp.Patterns.Command.IUndoableCommand">
            <summary>
            The interface definition for the command that can perform undo operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.ICommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.IUndoableMacroCommand">
            <summary>
            The interface definition for the macro command that can execute <see
            cref="T:ReSharp.Patterns.Command.IUndoableCommand"/>, perform undo and redo operation.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Command.IUndoableMacroCommand.CanUndo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/> can perform undo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/> can perform undo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ReSharp.Patterns.Command.IUndoableMacroCommand.CanRedo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/> can perform redo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/> can perform redo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Execute(ReSharp.Patterns.Command.IUndoableCommand)">
            <summary>
            Executes the specific <see cref="T:ReSharp.Patterns.Command.IUndoableCommand"/>.
            </summary>
            <param name="command">The sepecified <see cref="T:ReSharp.Patterns.Command.IUndoableCommand"/> to execute.</param>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Redo">
            <summary>
            Performs redo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.MacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IMacroCommand"/> implementation to executes other <see cref="T:ReSharp.Patterns.Command.ICommand"/> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.ICommand"/>
            <seealso cref="T:ReSharp.Patterns.Command.IMacroCommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.MacroCommand"/> class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.AddSubCommand(ReSharp.Patterns.Command.ICommand)">
            <summary>
            Adds sub command.
            </summary>
            <param name="subCommand">The sub command.</param>
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.UndoableMacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/> implementation to execute <see
            cref="T:ReSharp.Patterns.Command.IUndoableCommand"/>, perform undo and redo operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand"/>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand"/> class.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Command.UndoableMacroCommand.CanRedo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand"/> can perform redo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand"/> can perform redo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ReSharp.Patterns.Command.UndoableMacroCommand.CanUndo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand"/> can perform undo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand"/> can perform undo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Execute(ReSharp.Patterns.Command.IUndoableCommand)">
            <summary>
            Executes the specific <see cref="T:ReSharp.Patterns.Command.IUndoableCommand"/>.
            </summary>
            <param name="command">The sepecified <see cref="T:ReSharp.Patterns.Command.IUndoableCommand"/> to execute.</param>
            <exception cref="T:System.ArgumentNullException"><c>command</c> is <c>null</c>.</exception>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Redo">
            <summary>
            Performs redo operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.IPooledObject">
            <summary>
            Interface IPooledObject defined the <see cref="T:System.Object"/> that need to be added into object pool.
            </summary>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:ReSharp.Patterns.IPooledObject.OnSpawn">
            <summary>
            Called when <see cref="T:ReSharp.Patterns.ObjectPool`1"/> spawn the instance of <see cref="T:ReSharp.Patterns.IPooledObject"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.IPooledObject.OnDespawn">
            <summary>
            Called when <see cref="T:ReSharp.Patterns.ObjectPool`1"/> despawn the instance of <see cref="T:ReSharp.Patterns.IPooledObject"/>.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.ObjectPool`1">
            <summary>
            Represents a object pool.
            </summary>
            <typeparam name="T">Specifies the object type of the pool.</typeparam>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.ObjectPool`1"/> class with the method to
            create object defined.
            </summary>
            <param name="objectGenerateMethod">The method to create object defined.</param>
            <exception cref="T:System.ArgumentNullException"><c>objectGenerateMethod</c> is <c>null</c>.</exception>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.Despawn(`0)">
            <summary>
            Despawns the specified <see cref="T:ReSharp.Patterns.IPooledObject"/>.
            </summary>
            <param name="pooledObject">The instance of <see cref="T:ReSharp.Patterns.IPooledObject"/>.</param>
            <exception cref="T:System.ArgumentNullException"><c>pooledObject</c> is <c>null</c>.</exception>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.DespawnAll">
            <summary>
            Despawns all <see cref="T:ReSharp.Patterns.IPooledObject"/> s.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by the <see cref="T:ReSharp.Patterns.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.IsSpawned(`0)">
            <summary>
            Determines whether the specified <see cref="T:ReSharp.Patterns.IPooledObject"/> is spawned.
            </summary>
            <param name="instance">The instance of <see cref="T:ReSharp.Patterns.IPooledObject"/>.</param>
            <returns><c>true</c> if the specified instance is spawned; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.Spawn">
            <summary>
            Spawns the instance from pool.
            </summary>
            <returns>The instance spawned from pool.</returns>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.Add(`0)">
            <summary>
            Adds the specified instance <see cref="T:ReSharp.Patterns.IPooledObject"/> into pool.
            </summary>
            <param name="instance">The instance of <see cref="T:ReSharp.Patterns.IPooledObject"/>.</param>
        </member>
        <member name="M:ReSharp.Patterns.ObjectPool`1.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the <see cref="T:ReSharp.Patterns.ObjectPool`1"/> is in
            the disposed state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Cannot access a disposed object. Object name: 'ReSharp.Patterns.ObjectPool{T}'.
            </exception>
        </member>
        <member name="T:ReSharp.Patterns.Singleton`1">
            <summary>
            Abstract class for implementing singleton pattern of thread-safety by using double-check locking.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
        </member>
        <member name="F:ReSharp.Patterns.Singleton`1.syncRoot">
            <summary>
            Used for locking the instance calls.
            </summary>
        </member>
        <member name="F:ReSharp.Patterns.Singleton`1.instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Singleton`1.Instance">
            <summary>
            Gets the static instance.
            </summary>
            <value>The static instance.</value>
        </member>
        <member name="T:ReSharp.Patterns.IState">
            <summary>
            The interface definition for the state class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.IState.Enter(ReSharp.Patterns.IState)">
            <summary>
            Called when the state is entered.
            </summary>
            <param name="prevState">The previous state.</param>
        </member>
        <member name="M:ReSharp.Patterns.IState.Execute">
            <summary>
            Called when the state is executing.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.IState.Exit(ReSharp.Patterns.IState)">
            <summary>
            Called when the active state is exited.
            </summary>
            <param name="nextState">The next state.</param>
        </member>
        <member name="T:ReSharp.Patterns.FiniteStateMachine">
            <summary>
            Represents a finite state machine.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.FiniteStateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.FiniteStateMachine"/> class.
            </summary>
        </member>
        <member name="E:ReSharp.Patterns.FiniteStateMachine.StateTransitionTriggered">
            <summary>
            Raised when the current state is changed on this instance.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.FiniteStateMachine.CurrentState">
            <summary>
            Gets or sets the current state.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ReSharp.Patterns.FiniteStateMachine.GlobalState">
            <summary>
            Gets or sets the global state.
            </summary>
            <value>The global state.</value>
        </member>
        <member name="P:ReSharp.Patterns.FiniteStateMachine.PreviousState">
            <summary>
            Gets or sets the previous state.
            </summary>
            <value>The previous state.</value>
        </member>
        <member name="M:ReSharp.Patterns.FiniteStateMachine.ChangeState(ReSharp.Patterns.IState)">
            <summary>
            Changes the current state to the specific <see cref="T:ReSharp.Patterns.IState"/>.
            </summary>
            <param name="newState">The specific <see cref="T:ReSharp.Patterns.IState"/> to be current state.</param>
            <exception cref="T:System.ArgumentNullException"><c>newState</c> is <c>null</c>.</exception>
        </member>
        <member name="M:ReSharp.Patterns.FiniteStateMachine.RevertToPreviousState">
            <summary>
            Reverts to <see cref="P:ReSharp.Patterns.FiniteStateMachine.PreviousState"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.FiniteStateMachine.Update">
            <summary>
            Updates the state machine.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.StateTransitionTriggeredEventArgs">
            <summary>
            Event arguments for the <see cref="E:ReSharp.Patterns.FiniteStateMachine.StateTransitionTriggered"/> event.
            </summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="M:ReSharp.Patterns.StateTransitionTriggeredEventArgs.#ctor(ReSharp.Patterns.IState,ReSharp.Patterns.IState)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.StateTransitionTriggeredEventArgs"/> class
            with old <see cref="T:ReSharp.Patterns.IState"/> and new <see cref="T:ReSharp.Patterns.IState"/>.
            </summary>
            <param name="oldState">The old <see cref="T:ReSharp.Patterns.IState"/>.</param>
            <param name="newState">The new <see cref="T:ReSharp.Patterns.IState"/>.</param>
        </member>
        <member name="P:ReSharp.Patterns.StateTransitionTriggeredEventArgs.NewState">
            <summary>
            Gets the new <see cref="T:ReSharp.Patterns.IState"/>.
            </summary>
            <value>The new <see cref="T:ReSharp.Patterns.IState"/>.</value>
        </member>
        <member name="P:ReSharp.Patterns.StateTransitionTriggeredEventArgs.OldState">
            <summary>
            Gets the old <see cref="T:ReSharp.Patterns.IState"/>.
            </summary>
            <value>The old <see cref="T:ReSharp.Patterns.IState"/>.</value>
        </member>
        <member name="T:ReSharp.Security.MemoryDataModifiedException">
            <summary>
            The exception that is thrown when memory data has been modified.
            </summary>
            <seealso cref="T:System.Exception"/>
        </member>
        <member name="F:ReSharp.Security.MemoryDataModifiedException.errorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:ReSharp.Security.MemoryDataModifiedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Security.MemoryDataModifiedException"/> class.
            </summary>
        </member>
        <member name="T:ReSharp.Security.SecureDouble">
            <summary>
            Represents <see cref="T:System.Double"/> value with encryption.
            </summary>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Security.SecureDouble"/> struct with the <see
            cref="T:System.Double"/> to encrypt.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to encrypt.</param>
        </member>
        <member name="P:ReSharp.Security.SecureDouble.Value">
            <summary>
            Gets the original <see cref="T:System.Double"/> value.
            </summary>
            <value>The original <see cref="T:System.Double"/> value.</value>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Implicit(ReSharp.Security.SecureDouble)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureDouble"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Implicit(System.Double)~ReSharp.Security.SecureDouble">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:ReSharp.Security.SecureDouble"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Implicit(ReSharp.Security.SecureInt32)~ReSharp.Security.SecureDouble">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:ReSharp.Security.SecureDouble"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Implicit(ReSharp.Security.SecureInt64)~ReSharp.Security.SecureDouble">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt64"/> to <see cref="T:ReSharp.Security.SecureDouble"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Implicit(ReSharp.Security.SecureSingle)~ReSharp.Security.SecureDouble">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureSingle"/> to <see cref="T:ReSharp.Security.SecureDouble"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Subtraction(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Subtracts a <see cref="T:ReSharp.Security.SecureDouble"/> structure from a <see cref="T:ReSharp.Security.SecureDouble"/> structure.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the results of the subtraction.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Decrement(ReSharp.Security.SecureDouble)">
            <summary>
            Decrements the <see cref="T:ReSharp.Security.SecureDouble"/> operand by one.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> decremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Inequality(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to
            determine whether they are not equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the two <see cref="T:ReSharp.Security.SecureDouble"/> structures are not equal or
            <c>false</c> if the two <see cref="T:ReSharp.Security.SecureDouble"/> structures are equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Modulus(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Computes the remainder after dividing the first <see cref="T:ReSharp.Security.SecureDouble"/> parameter by
            the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the remainder.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Multiply(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Computes the product of the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the product of the two parameters.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Division(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Divides the first <see cref="T:ReSharp.Security.SecureDouble"/> parameter from the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the result of the division.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Addition(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Computes the sum of the two specified <see cref="T:ReSharp.Security.SecureDouble"/> structures.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the sum of the specified <see cref="T:ReSharp.Security.SecureDouble"/> structures.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Increment(ReSharp.Security.SecureDouble)">
            <summary>
            Increments the <see cref="T:ReSharp.Security.SecureDouble"/> operand by 1.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureDouble"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> incremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_LessThan(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to determine whether the first is
            less than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_LessThanOrEqual(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to determine whether the first is
            less than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_Equality(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to
            determine whether they are equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the two instances are equal or <c>false</c> if the two instances are not equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_GreaterThan(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to determine whether the first is
            greater than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.op_GreaterThanOrEqual(ReSharp.Security.SecureDouble,ReSharp.Security.SecureDouble)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureDouble"/> parameters to determine whether the first is
            greater than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureDouble"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.CompareTo(ReSharp.Security.SecureDouble)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureDouble.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:ReSharp.Security.SecureInt32">
            <summary>
            Represents <see cref="T:System.Int32"/> value with encryption.
            </summary>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:SecureInt"/> struct with the <see
            cref="T:System.Int32"/> value to encrypt.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to encrypt.</param>
        </member>
        <member name="P:ReSharp.Security.SecureInt32.Value">
            <summary>
            Gets the original <see cref="T:System.Int32"/> value.
            </summary>
            <value>The original <see cref="T:System.Int32"/> value.</value>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Implicit(ReSharp.Security.SecureInt32)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Implicit(ReSharp.Security.SecureInt32)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Implicit(ReSharp.Security.SecureInt32)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Implicit(ReSharp.Security.SecureInt32)~System.Int64">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Implicit(System.Int32)~ReSharp.Security.SecureInt32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:ReSharp.Security.SecureInt32"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Subtraction(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Subtracts a <see cref="T:ReSharp.Security.SecureInt32"/> structure from a <see cref="T:ReSharp.Security.SecureInt32"/> structure.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the results of the subtraction.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Decrement(ReSharp.Security.SecureInt32)">
            <summary>
            Decrements the <see cref="T:ReSharp.Security.SecureInt32"/> operand by one.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> decremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Inequality(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to
            determine whether they are not equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the two <see cref="T:ReSharp.Security.SecureInt32"/> structures are not equal or <c>false</c>
            if the two <see cref="T:ReSharp.Security.SecureInt32"/> structures are equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Modulus(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Computes the remainder after dividing the first <see cref="T:ReSharp.Security.SecureInt32"/> parameter by
            the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the remainder.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Multiply(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Computes the product of the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the product of the two parameters.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Division(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Divides the first <see cref="T:ReSharp.Security.SecureInt32"/> parameter from the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the result of the division.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Addition(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Computes the sum of the two specified <see cref="T:ReSharp.Security.SecureInt32"/> structures.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the sum of the specified <see cref="T:ReSharp.Security.SecureInt32"/> structures.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Increment(ReSharp.Security.SecureInt32)">
            <summary>
            Increments the <see cref="T:ReSharp.Security.SecureInt32"/> operand by 1.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt32"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> incremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_LessThan(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to determine whether the first is
            less than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_LessThanOrEqual(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to determine whether the first is
            less than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_Equality(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to
            determine whether they are equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the two instances are equal or <c>false</c> if the two instances are not equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_GreaterThan(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to determine whether the first is
            greater than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.op_GreaterThanOrEqual(ReSharp.Security.SecureInt32,ReSharp.Security.SecureInt32)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt32"/> parameters to determine whether the first is
            greater than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.CompareTo(ReSharp.Security.SecureInt32)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt32.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:ReSharp.Security.SecureInt64">
            <summary>
            Represents <see cref="T:System.Int64"/> value with encryption.
            </summary>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Security.SecureInt64"/> struct with the <see
            cref="T:System.Int64"/> value to encrypt.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to encrypt.</param>
        </member>
        <member name="P:ReSharp.Security.SecureInt64.Value">
            <summary>
            Gets the original <see cref="T:System.Int64"/> value.
            </summary>
            <value>The original <see cref="T:System.Int64"/> value.</value>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Implicit(ReSharp.Security.SecureInt64)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt64"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Implicit(ReSharp.Security.SecureInt64)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt64"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Implicit(ReSharp.Security.SecureInt64)~System.Int64">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt64"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Implicit(System.Int64)~ReSharp.Security.SecureInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:ReSharp.Security.SecureInt64"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Implicit(ReSharp.Security.SecureInt32)~ReSharp.Security.SecureInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:ReSharp.Security.SecureInt64"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Subtraction(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Subtracts a <see cref="T:ReSharp.Security.SecureInt64"/> structure from a <see cref="T:ReSharp.Security.SecureInt64"/> structure.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the results of the subtraction.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Decrement(ReSharp.Security.SecureInt64)">
            <summary>
            Decrements the <see cref="T:ReSharp.Security.SecureInt64"/> operand by one.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> decremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Inequality(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to
            determine whether they are not equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the two <see cref="T:ReSharp.Security.SecureInt64"/> structures are not equal or <c>false</c>
            if the two <see cref="T:ReSharp.Security.SecureInt64"/> structures are equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Modulus(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Computes the remainder after dividing the first <see cref="T:ReSharp.Security.SecureInt64"/> parameter by
            the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the remainder.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Multiply(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Computes the product of the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the product of the two parameters.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Division(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Divides the first <see cref="T:ReSharp.Security.SecureInt64"/> parameter from the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the result of the division.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Addition(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Computes the sum of the two specified <see cref="T:ReSharp.Security.SecureInt64"/> structures.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the sum of the specified <see cref="T:ReSharp.Security.SecureInt64"/> structures.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Increment(ReSharp.Security.SecureInt64)">
            <summary>
            Increments the <see cref="T:ReSharp.Security.SecureInt64"/> operand by 1.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureInt64"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> incremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_LessThan(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to determine whether the first is
            less than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_LessThanOrEqual(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to determine whether the first is
            less than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_Equality(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to
            determine whether they are equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the two instances are equal or <c>false</c> if the two instances are not equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_GreaterThan(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to determine whether the first is
            greater than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.op_GreaterThanOrEqual(ReSharp.Security.SecureInt64,ReSharp.Security.SecureInt64)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureInt64"/> parameters to determine whether the first is
            greater than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.CompareTo(ReSharp.Security.SecureInt64)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureInt64.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:ReSharp.Security.SecureSingle">
            <summary>
            Represents <see cref="T:System.Single"/> value with encryption.
            </summary>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Security.SecureSingle"/> struct with the <see
            cref="T:System.Single"/> value to encrypt.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to encrypt.</param>
        </member>
        <member name="P:ReSharp.Security.SecureSingle.Value">
            <summary>
            Gets the original <see cref="T:System.Single"/> value.
            </summary>
            <value>The original <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Implicit(ReSharp.Security.SecureSingle)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureSingle"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Implicit(ReSharp.Security.SecureSingle)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureSingle"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Implicit(System.Single)~ReSharp.Security.SecureSingle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:ReSharp.Security.SecureSingle"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Implicit(ReSharp.Security.SecureInt32)~ReSharp.Security.SecureSingle">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt32"/> to <see cref="T:ReSharp.Security.SecureSingle"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt32"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Implicit(ReSharp.Security.SecureInt64)~ReSharp.Security.SecureSingle">
            <summary>
            Performs an implicit conversion from <see cref="T:ReSharp.Security.SecureInt64"/> to <see cref="T:ReSharp.Security.SecureSingle"/>.
            </summary>
            <param name="value">The <see cref="T:ReSharp.Security.SecureInt64"/> structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Subtraction(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Subtracts a <see cref="T:ReSharp.Security.SecureSingle"/> structure from a <see cref="T:ReSharp.Security.SecureSingle"/> structure.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the results of the subtraction.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Decrement(ReSharp.Security.SecureSingle)">
            <summary>
            Decrements the <see cref="T:ReSharp.Security.SecureSingle"/> operand by one.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> decremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Inequality(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to
            determine whether they are not equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the two <see cref="T:ReSharp.Security.SecureSingle"/> structures are not equal or
            <c>false</c> if the two <see cref="T:ReSharp.Security.SecureSingle"/> structures are equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Modulus(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Computes the remainder after dividing the first <see cref="T:ReSharp.Security.SecureSingle"/> parameter by
            the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the remainder.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Multiply(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Computes the product of the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the product of the two parameters.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Division(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Divides the first <see cref="T:ReSharp.Security.SecureSingle"/> parameter from the second.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the result of the division.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Addition(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Computes the sum of the two specified <see cref="T:ReSharp.Security.SecureSingle"/> structures.
            </summary>
            <param name="x">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="y">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the sum of the specified <see cref="T:ReSharp.Security.SecureSingle"/> structures.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Increment(ReSharp.Security.SecureSingle)">
            <summary>
            Increments the <see cref="T:ReSharp.Security.SecureSingle"/> operand by 1.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            A <see cref="T:ReSharp.Security.SecureSingle"/> structure whose <paramref name="Value"/> property contains
            the value of <c>value</c> incremented by 1.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_LessThan(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to determine whether the first is
            less than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_LessThanOrEqual(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to determine whether the first is
            less than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is less than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_Equality(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Performs a logical comparison of the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to
            determine whether they are equal.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the two instances are equal or <c>false</c> if the two instances are not equal.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_GreaterThan(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to determine whether the first is
            greater than the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than the second instance. Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.op_GreaterThanOrEqual(ReSharp.Security.SecureSingle,ReSharp.Security.SecureSingle)">
            <summary>
            Compares the two <see cref="T:ReSharp.Security.SecureSingle"/> parameters to determine whether the first is
            greater than or equal to the second.
            </summary>
            <param name="left">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <param name="right">A <see cref="T:ReSharp.Security.SecureSingle"/> structure.</param>
            <returns>
            <c>true</c> if the first instance is greater than or equal to the second instance.
            Otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.CompareTo(ReSharp.Security.SecureSingle)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:ReSharp.Security.SecureSingle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:ReSharp.Security.SecurityMemoryData">
            <summary>
            <see cref="T:ReSharp.Security.SecurityMemoryData"/> is a class that process memory data encryption and decryption.
            </summary>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ReSharp.Security.SecurityMemoryData"/> class.
            </summary>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.DecryptDoubleValue(System.Int64,System.Int64)">
            <summary>
            Decrypts the <see cref="T:System.Double"/> value with encryption.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value with encryption.</param>
            <param name="check">The check for the original <see cref="T:System.Double"/> value.</param>
            <returns>The decrypted <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.DecryptInt32Value(System.Int32,System.Int32)">
            <summary>
            Decrypts the <see cref="T:System.Int32"/> value with encryption.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to decrpt.</param>
            <param name="check">The check for the original <see cref="T:System.Int32"/> value.</param>
            <returns>The decrypted <see cref="T:System.Int32"/> value.</returns>
            <exception cref="T:ReSharp.Security.MemoryDataModifiedException">
            If the <see cref="T:System.Int32"/> value with encryption has been modified.
            </exception>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.DecryptInt64Value(System.Int64,System.Int64)">
            <summary>
            Decrypts the <see cref="T:System.Int64"/> value with encryption.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value with encryption.</param>
            <param name="check">The check for the original <see cref="T:System.Int64"/> value.</param>
            <returns>The decrypted <see cref="T:System.Int64"/> value.</returns>
            <exception cref="T:ReSharp.Security.MemoryDataModifiedException">
            If the <see cref="T:System.Int64"/> data with encryotion has been modified.
            </exception>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.DecryptSingleValue(System.Int32,System.Int32)">
            <summary>
            Decrypts the <see cref="T:System.Single"/> value with encryption.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to decrypt.</param>
            <param name="check">The check for the original <see cref="T:System.Single"/> value.</param>
            <returns>The encrypted <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.EncryptDoubleValue(System.Double,System.Int64@)">
            <summary>
            Encrypts the <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to encrypt.</param>
            <param name="check">The check for the <see cref="T:System.Double"/> value.</param>
            <returns>The encrypted <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.EncryptInt32Value(System.Int32,System.Int32@)">
            <summary>
            Encrypts the <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to encrypt.</param>
            <param name="check">The check for the <see cref="T:System.Int32"/> value.</param>
            <returns>The encrypted <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.EncryptInt64Value(System.Int64,System.Int64@)">
            <summary>
            Encrypts the <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to encrypt.</param>
            <param name="check">The check for the <see cref="T:System.Int64"/> value.</param>
            <returns>The encrypted <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.EncryptSingleValue(System.Single,System.Int32@)">
            <summary>
            Encrypts the <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to encrypt.</param>
            <param name="check">The check for the <see cref="T:System.Single"/> value.</param>
            <returns>The encrypted <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="M:ReSharp.Security.SecurityMemoryData.GenerateRandomSeed">
            <summary>
            Generates the random seed.
            </summary>
            <returns>The seed for <see cref="T:System.Random"/>.</returns>
        </member>
    </members>
</doc>
